<?php
/**	op-module-tutorial:/content/router/index.phtml
 *
 * @created    2025-08-12
 * @version    1.0
 * @package    op-module-tutorial
 * @author     Tomoaki Nagahara
 * @copyright  Tomoaki Nagahara All right reserved.
 */

/**	namespace
 *
 */
namespace OP;

//	...
$_ORIGIN = $_SERVER['REQUEST_SCHEME'].'://'.$_SERVER['HTTP_HOST'].($_SERVER['SERVER_PORT']==80?'':$_SERVER['SERVER_PORT']);

?>
<section class="markdown" data-translation="true">
# What is the Router?

The router looks for which `index.php` to run based on the accessed URL.

For example, if you access `<?= $_ORIGIN . OP()->URL('app:/test/') ?>`,
Locate `<?= OP()->Path('app:/test/index.php') ?>`.
</section>

<section class="markdown" data-translation="true">
## More detailed explanation

The current the "ORIGIN" is as follows:

<pre><code>
<?= $_ORIGIN ?>
</code></pre>

The document root of the "ORIGIN" is as follows:

<pre><code>
<?= $_SERVER['DOCUMENT_ROOT'] ?>
</code></pre>

The directory where this application is running is:

<pre><code>
<?= OP()->Path('app:/') ?>
</code></pre>

When you access `<?= $_ORIGIN . OP()->URL('app:/test/') ?>`, `index.php` in the path `<?= OP()->URL('app:/test/') ?>` under the document root will be executed.
</section>

<section class="markdown" data-translation="true">
## What's your next challenge? Let's nest index.php files!

Nesting controllers is very easy in the ONEPIECE Framework.
Just create a directory inside your directory and create `index.php` inside it!

Specifically, create a directory structure like this:

```
app:/test/
    ├ index.php
    ├ foo/index.php
    └ bar/index.php
```

 * app:/test/index.php – Controls access to /test/
 * app:/test/foo/index.php – Controls access to /test/foo/
 * app:/test/bar/index.php – Controls access to /test/bar/

In the ONEPIECE Framework, each index.php serves as the controller for its respective directory.
</section>

<section class="markdown" data-translation="true">
## Let's try it!

In the previous chapter, we created a `test` directory under the "APP" root and created `index.php` in the `test` directory.<br/>
Your "APP" root is here: `<?= OP()->Path('app:/') ?>`<br/>
From now on, we will abbreviate the "APP" route and write it as `app:/`.<br/>

---

Create `app:/test/foo/index.php` and write the following in it:

```php
&lt;?php
echo 'foo';
```

---

Create `app:/test/bar/index.php` and write the following in it:

```php
&lt;?php
echo 'bar';
```

---

Please access `<?= $_ORIGIN . OP()->URL('app:/test/foo/') ?>` and `<?= $_ORIGIN . OP()->URL('app:/test/bar/') ?>` respectively and check if the display changes.
</section>

<?php
if(!OP()->Template('tutorial:/yesno.phtml',[
	'message'=>'Are the changes reflected?',
	'yes'=>'Good! Now you have nested controllers!',
]) ){
	return;
}
?>

<section class="markdown" data-translation="true">
## What if a directory does not contain an `index.php`?

What happens if someone accesses a directory that does not contain an `index.php` file?
The answer is: **nothing happens!** Let’s give it a try!

---

Please create the following directory.
Create only the directory, not the files.

```
app:/test/hoge/
```

Try accessing the following URL. `app:/test/index.php` will be executed.

```
<?= $_ORIGIN . OP()->URL('app:/test/hoge/') ?>

```
</section>

<?php
if(!OP()->Template('tutorial:/yesno.phtml',['message'=>'Is app:/test/index.php running?','yes'=>'So Good!']) ){
	return;
}
?>

<section class="markdown" data-translation="true">
## By the way, where did "hoge" disappear to?

The "hoge" hasn’t disappeared. It was stored as a URL arguments.

URL arguments are a technique that treats "index.php" as an argument if it is not found.

To retrieve the "hoge" saved as a URL argument, add the following code to `app:/test/index.php`.

```php
$args = OP()->Unit()->Router()->Args();
```

Then, try visiting <?= $_ORIGIN . OP()->URL('app:/test/hoge/') ?> or <?= $_ORIGIN . OP()->URL('app:/test/hoge/fuga/') ?>.
</section>

<?php
if(!OP()->Template('tutorial:/yesno.phtml',['message'=>'Did you get the URL arguments?','yes'=>'So very Good!']) ){
	return;
}
?>

<section class="markdown" data-translation="true">
## The extra URLs can be obtained as a URL arguments

By using URL arguments, a controller can create logic that respond according to the URL.

We will continue to explain how to use URL arguments in the next chapter!
</section>

<section class="markdown" data-translation="true">
# Key Takeaway - Last Piece of Advice

In the previous chapter, you created a `test` directory under the "App" root and then created an `index.php` file inside the `test` directory.
We also explained this `index.php` serves as the file that controls access to the directory.

In this chapter, we learned that we can nest controllers by simply creating an `index.php` file in each directory.

We also learned that the remaining URL can be obtained as an argument.

* `index.php` will become the controller for that directory.
* You can nest controllers by simply creating `index.php` in each directory.
* Any remaining URLs can be obtained as arguments.
</section>

<?php
if(!OP()->Template('tutorial:/yesno.phtml',['message'=>'Did you understand the last piece of advice?','yes'=>'Super Great!!']) ){
	return;
}
?>

<section class="markdown" data-translation="true">
# The next chapter is URL arguments

In the next chapter, you will learn how to take advantage of URL arguments.

<?php OP()->Template('tutorial:/feedback.phtml') ?>

[➡️ Let's move on to the next chapter: "URL arguments"](<?php echo OP()->URL('tutorial:/newworld/') ?>)
</section>
